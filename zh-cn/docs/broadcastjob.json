{
  "filename": "broadcastjob.md",
  "__html": "<h1 id=\"broadcastjob\">BroadcastJob <a class=\"header-anchor\" href=\"#broadcastjob\">#</a></h1>\n<p>这个控制器将 Pod 分发到集群中每个 node 上，类似于 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/\">DaemonSet</a>，\n但是 BroadcastJob 管理的 Pod 并不是长期运行的 daemon 服务，而是类似于 <a href=\"https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/\">Job</a> 的任务类型 Pod。</p>\n<p>最终在每个 node 上的 Pod 都执行完成退出后，BroadcastJob 和这些 Pod 并不会占用集群资源。\n这个控制器非常有利于做升级基础软件、巡检等过一段时间需要在整个集群中跑一次的工作。</p>\n<p>此外，BroadcastJob 还可以维持每个 node 跑成功一个 Pod 任务。如果采取这种模式，当后续集群中新增 node 时 BroadcastJob 也会分发 Pod 任务上去执行。</p>\n<h2 id=\"broadcastjob-spec\">BroadcastJob Spec <a class=\"header-anchor\" href=\"#broadcastjob-spec\">#</a></h2>\n<h3 id=\"template\">Template <a class=\"header-anchor\" href=\"#template\">#</a></h3>\n<p><code>Template</code> 描述了 Pod 模板，用于创建任务 Pod。\n注意，由于是任务类型的 Pod，其中的 restart policy 只能设置为 <code>Never</code> 或 <code>OnFailure</code>，不允许设为 <code>Always</code>。</p>\n<h3 id=\"parallelism\">Parallelism <a class=\"header-anchor\" href=\"#parallelism\">#</a></h3>\n<p><code>Parallelism</code> 指定了最多能允许多少个 Pod 同时在执行任务，默认不做限制。</p>\n<p>比如，一个集群里有 10 个 node、并设置了 <code>Parallelism</code> 为 3，那么 BroadcastJob 会保证同时只会有 3 个 node 上的 Pod 在执行。每当一个 Pod 执行完成，BroadcastJob 才会创建一个新 Pod 执行。</p>\n<h3 id=\"completionpolicy\">CompletionPolicy <a class=\"header-anchor\" href=\"#completionpolicy\">#</a></h3>\n<p><code>CompletionPolicy</code> 支持指定 BroadcastJob 控制器的 reconciling 行为，可以设置为 <code>Always</code> 或 <code>Never</code>：</p>\n<h4 id=\"always\"><code>Always</code> <a class=\"header-anchor\" href=\"#always\">#</a></h4>\n<p><code>Always</code> 策略意味着 job 最终会完成，不管是执行成功还是失败了。在 <code>Always</code> 策略下还可以设置以下参数：</p>\n<ul>\n<li>\n<p><code>ActiveDeadlineSeconds</code>：指定一个超时时间，如果 BroadcastJob 开始运行超过了这个时间，所有还在跑着的 job 都会被停止、并标记为失败。</p>\n</li>\n<li>\n<p><code>BackoffLimit</code>：指定一个重试次数，超过这个次数后才标记 job 失败，默认没有限制。目前，Pod 实际的重试次数是看 Pod status 中上报所有容器的 <a href=\"https://github.com/kruiseio/kruise/blob/d61c12451d6a662736c4cfc48682fa75c73adcbc/vendor/k8s.io/api/core/v1/types.go#L2314\">ContainerStatus.RestartCount</a> 重启次数。如果这个重启次数超过了 <code>BackoffLimit</code>，这个 job 就会被标记为失败、并把运行的 Pod 删除掉。</p>\n</li>\n<li>\n<p><code>TTLSecondsAfterFinished</code> 限制了 BroadcastJob 在完成之后的存活时间，默认没有限制。比如设置了 <code>TTLSecondsAfterFinished</code> 为 10s，那么当 job 结束后超过了 10s，控制器就会把 job 和下面的所有 Pod 删掉。</p>\n</li>\n</ul>\n<h4 id=\"never\"><code>Never</code> <a class=\"header-anchor\" href=\"#never\">#</a></h4>\n<p><code>Never</code> 策略意味着 BroadcastJob 永远都不会结束（标记为 Succeeded 或 Failed），即使当前 job 下面的 Pod 都已经执行成功了。\n这也意味着 <code>ActiveDeadlineSeconds</code>、 <code>BackoffLimit</code>、 <code>TTLSecondsAfterFinished</code> 这三个参数是不能使用的。</p>\n<p>比如说，用户希望对集群中每个 node 都下发一个配置，包括后续新增的 node 都需要做，那么就可以创建一个 <code>Never</code> 策略的 BroadcastJob。</p>\n<h2 id=\"%E4%BE%8B%E5%AD%90\">例子 <a class=\"header-anchor\" href=\"#%E4%BE%8B%E5%AD%90\">#</a></h2>\n<h3 id=\"%E7%9B%91%E6%8E%A7-broadcastjob-status\">监控 BroadcastJob status <a class=\"header-anchor\" href=\"#%E7%9B%91%E6%8E%A7-broadcastjob-status\">#</a></h3>\n<p>在一个单 node 集群中创建一个 BroadcastJob，执行 <code>kubectl get bcj</code> （BroadcastJob 的 short name）看到以下状态：</p>\n<pre><code class=\"language-shell\"> NAME                 DESIRED   ACTIVE   SUCCEEDED   FAILED\n broadcastjob-sample  1         0        1           0\n</code></pre>\n<ul>\n<li><code>Desired</code> : 期望的 Pod 数量（等同于当前集群中匹配的 node 数量）</li>\n<li><code>Active</code>: 运行中的 Pod 数量</li>\n<li><code>SUCCEEDED</code>: 执行成功的 Pod 数量</li>\n<li><code>FAILED</code>: 执行失败的 Pod 数量</li>\n</ul>\n<h3 id=\"%E4%BD%BF%E7%94%A8-ttlsecondsafterfinished\">使用 <code>ttlSecondsAfterFinished</code> <a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8-ttlsecondsafterfinished\">#</a></h3>\n<p>创建 BroadcastJob 配置 <code>ttlSecondsAfterFinished</code> 为 30。\n这个 job 会在执行结束后 30s 被删除。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">BroadcastJob</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">broadcastjob-ttl</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">pi</span>\n          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">perl</span>\n          <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">[\"perl\",</span>  <span class=\"hljs-string\">\"-Mbignum=bpi\"</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">\"-wle\"</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">\"print bpi(2000)\"</span><span class=\"hljs-string\">]</span>\n      <span class=\"hljs-attr\">restartPolicy:</span> <span class=\"hljs-string\">Never</span>\n  <span class=\"hljs-attr\">completionPolicy:</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">Always</span>\n    <span class=\"hljs-attr\">ttlSecondsAfterFinished:</span> <span class=\"hljs-number\">30</span>\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8-activedeadlineseconds\">使用 <code>activeDeadlineSeconds</code> <a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8-activedeadlineseconds\">#</a></h3>\n<p>创建 BroadcastJob 配置 <code>activeDeadlineSeconds</code> 为 10。\n这个 job 会在运行超过 10s 之后被标记为失败，并把下面还在运行的 Pod 删除掉。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">BroadcastJob</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">broadcastjob-active-deadline</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sleep</span>\n          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">busybox</span>\n          <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">[\"sleep\",</span>  <span class=\"hljs-string\">\"50000\"</span><span class=\"hljs-string\">]</span>\n      <span class=\"hljs-attr\">restartPolicy:</span> <span class=\"hljs-string\">Never</span>\n  <span class=\"hljs-attr\">completionPolicy:</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">Always</span>\n    <span class=\"hljs-attr\">activeDeadlineSeconds:</span> <span class=\"hljs-number\">10</span>\n</code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8-never-completionpolicy\">使用 <code>Never</code> completionPolicy <a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8-never-completionpolicy\">#</a></h3>\n<p>创建 BroadcastJob 配置 <code>completionPolicy</code> 为 <code>Never</code>。\n这个 job 会持续运行即使当前所有 node 上的 Pod 都执行完成了。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">BroadcastJob</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">broadcastjob-never-complete</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">template:</span>\n    <span class=\"hljs-attr\">spec:</span>\n      <span class=\"hljs-attr\">containers:</span>\n        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sleep</span>\n          <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">busybox</span>\n          <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">[\"sleep\",</span>  <span class=\"hljs-string\">\"5\"</span><span class=\"hljs-string\">]</span>\n      <span class=\"hljs-attr\">restartPolicy:</span> <span class=\"hljs-string\">Never</span>\n  <span class=\"hljs-attr\">completionPolicy:</span>\n    <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">Never</span>\n</code></pre>\n",
  "link": "/zh-cn/docs/broadcastjob.html",
  "meta": {
    "title": "BroadcastJob"
  }
}